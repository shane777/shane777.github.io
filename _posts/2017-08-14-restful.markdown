---
layout: post
title:  " RESTful 架构详解及案例"
date:   2017-08-12 21:10:00 +0800
categories: Web
---

###1. 基础介绍  
<br/>
REST，即Representational State Transfer的缩写。翻译是"表现层状态转化"。  
如果一个架构符合REST原则，就称它为RESTful架构。

"表现层状态转化"，真的是每一个字都认识组在一起却不知道是什么意思的典范词汇啊。想要理解还是先从Web是什么这个问题出发: Web是分布式信息系统，为超文本文件和其他对象（资源）提供访问入口。

资源是Web架构的关键点,需要 3个操作 识别(identify) 表示(represent) 交互(interact with),通过这三个操作，又引出三个概念uri（统一资源标识符包括url和urn）识别资源；representation （例如html，xml，图片，视频等等）表示资源；通过协议（包括http，ftp等等）与资源进行交互。

所以REST就是选择通过使用http协议和uri，利用client/server model对资源进行CRUD (Create/Read/Update/Delete)增删改查操作。它本身描述的只是一种交互形式，实际上这个概念提出的作者本身的目的也就是改变应用程序的互动风格，得到一个功能强、性能好、适宜通信的架构。

如果大体上的概念看完还是不太能理解，下面有阮一峰老师相关文章里转出来的关于 Representational State Transfer 其具体名称解释

#####一、资源（Resources）  
REST的名称"表现层状态转化"中，省略了主语。"表现层"其实指的是"资源"（Resources）的"表现层"。  
所谓"资源"，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，
总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，
访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。     
所谓"上网"，就是与互联网上一系列的"资源"互动，调用它的URI。  

#####二、表现层（Representation）
"资源"是一种信息实体，它可以有多种外在表现形式。我们把"资源"具体呈现出来的形式，叫做它的"表现层"（Representation）。  
比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；
图片可以用JPG格式表现，也可以用PNG格式表现。  
URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的".html"后缀名是不必要的，因为这个后缀名表示格式，属于"表现层"范畴，
而URI应该只代表"资源"的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对"表现层"的描述。  

#####三、状态转化（State Transfer）
访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。  
互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。
因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生"状态转化"（State Transfer）。
而这种转化是建立在表现层之上的，所以就是"表现层状态转化"。  
客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。
它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。  

#####四、综述
综合上面的解释，我们总结一下什么是RESTful架构：  
（1）每一个URI代表一种资源；  
（2）客户端和服务器之间，传递这种资源的某种表现层；  
（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现"表现层状态转化"。  

###2. 案例  
<br/>
经常提到的RESTfull API实际上就是符合以上规范的一种API接口 比如以下是一个具体的API

![screenshot1]({{site.url}}/assets/17post/170814.png)

上面atom格式中的多个<link>元素，它们分别定义了当前状态下合法的状态转移。  

例如，这是一个指向自己的链接，其中rel属性指定了状态转移的关系为自身。  
`<link href="http://example.org/posts" rel="self" />`  

这是下一页的链接，  
`<link href="http://example.org/posts?pn=2" rel="next" />`

如果当前不是第一页的话，就会有类似如下的链接来表示上一页，  
`<link href="http://example.org/posts?pn=2" rel="prev" />`

而这个是某一篇文章的链接，  
`<link href="http://example.org/post-xxx" />`  

总结一下，就是：  
    1. 服务器生成包含状态转移的表征数据，用来响应客户端对于一个资源的请求；  
	2. 客户端借助这份表征数据，记录了当前的应用状态以及对应可转移状态的方式。  

当然，为了要实现这一系列的功能，一个不可或缺的东西就是超文本（hypertext）或者说超媒体类型（hypermedia type）。

###3. 优点
<br/>
最后 关于我们为什么要使用RESTful框架做个总结，它有一部分限制，却同时也成为了优点,即：  

1.客户-服务器端分离   
现在Client端包括桌面程序移动设备等等，使用原来的JSP等方法并不能完美兼容所有客户端。
而这一种分离的设计方式可以提升兼容性，也能简化服务器端，还可以让两端分别优化。  
2.无状态  
来自客户端的每个请求都会包含服务器所需要的所有信息，提高了可见性和可靠性。  
3.统一接口

参考：
https://www.zhihu.com/question/28557115/answer/48120528
http://www.ruanyifeng.com/blog/2011/09/restful